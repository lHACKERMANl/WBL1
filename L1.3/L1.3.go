package main

import (
	"fmt"
	"sync"
)

/*
Для нахождения суммы квадратов последовательности чисел с использованием конкурентных вычислений,
можно модифицировать предыдущий код. Вместо отправки каждого квадрата в канал,
будем аккумулировать сумму в горутине и возвращать ее как результат
*/

func main() {
	numbers := []int{2, 4, 6, 8, 10}

	// Используем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// Канал для суммирования квадратов чисел из горутин
	sumCh := make(chan int)

	// Запускаем горутины для вычисления квадратов и их суммирования
	for _, num := range numbers {
		wg.Add(1)
		go func(x int) {
			defer wg.Done()
			square := x * x
			sumCh <- square
		}(num)
	}

	// Горутина для закрытия канала после завершения всех вычислений
	go func() {
		wg.Wait()
		close(sumCh)
	}()

	// Суммируем квадраты чисел из канала
	sum := 0
	for square := range sumCh {
		sum += square
	}

	fmt.Printf("Сумма квадратов: %d\n", sum)
}
